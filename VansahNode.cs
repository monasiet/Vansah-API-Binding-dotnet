using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OpenQA.Selenium;
using System;
using System.Buffers.Text;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection.PortableExecutable;
using System.Text;
using System.Text.Json.Nodes;
using static System.Net.Mime.MediaTypeNames;

namespace Practice
{
    public class VansahNode
    {


        //--------------------------- ENDPOINTS -------------------------------------------------------------------------------
        private static String API_VERSION = "v1";
        private static String VANSAH_URL = "https://prod.vansahnode.app";
        private static String ADD_TEST_RUN = VANSAH_URL + "/api/" + API_VERSION + "/run";
        private static String ADD_TEST_LOG = VANSAH_URL + "/api/" + API_VERSION + "/logs";
        private static String UPDATE_TEST_LOG = VANSAH_URL + "/api/" + API_VERSION + "/logs/";
        private static String REMOVE_TEST_LOG = VANSAH_URL + "/api/" + API_VERSION + "/logs/";
        private static String REMOVE_TEST_RUN = VANSAH_URL + "/api/" + API_VERSION + "/run/";
        private static String TEST_SCRIPT = VANSAH_URL + "/api/" + API_VERSION + "/testCase/list/testScripts";
        //--------------------------------------------------------------------------------------------------------------------


        //--------------------------- INFORM YOUR UNIQUE VANSAH TOKEN HERE ---------------------------------------------------
        private static String VANSAH_TOKEN = "Your Vansah Connect Token Here";

        //--------------------------------------------------------------------------------------------------------------------


        //--------------------------- IF YOU ARE USING VANSAH BINDING BEHIND A PROXY, INFORM THE DETAILS HERE ----------------
        private static String hostAddr = "";
        private static String portNo = "";
        //--------------------------------------------------------------------------------------------------------------------	


        //--------------------------- INFORM IF YOU WANT TO UPDATE VANSAH HERE -----------------------------------------------
        // 0 = NO RESULTS WILL BE SENT TO VANSAH
        // 1 = RESULTS WILL BE SENT TO VANSAH
        private static readonly String updateVansah = "1";
        //--------------------------------------------------------------------------------------------------------------------	


        //--------------------------------------------------------------------------------------------------------------------
        private String TESTFOLDERS_ID;  //Mandatory (GUID Test folder Identifer) Optional if issue_key is provided
        private String JIRA_ISSUE_KEY;  //Mandatory (JIRA ISSUE KEY) Optional if Test Folder is provided
        private String SPRINT_KEY; //Mandatory (SPRINT KEY)
        private String CASE_KEY;   //CaseKey ID (Example - TEST-C1) Mandatory
        private String RELEASE_KEY;  //Release Key (JIRA Release/Version Key) Mandatory
        private String ENVIRONMENT_KEY; //Enivronment ID from Vansah for JIRA app. (Example SYS or UAT ) Mandatory
        private int RESULT_KEY;    // Result Key such as (Result value. Options: (0 = N/A, 1= FAIL, 2= PASS, 3 = Not tested)) Mandatory
        private bool SEND_SCREENSHOT;   // true or false If Required to take a screenshot of the webPage that to be tested.
        private String COMMENT;  //Actual Result 	
        private int STEP_ORDER;   //Test Step index	
        private String TEST_RUN_IDENTIFIER; //To be generated by API request
        private String TEST_LOG_IDENTIFIER; //To be generated by API request
        private String FILE;
        private int testRows;
        private String PROJECT_KEY;
        private HttpClient httpClient;
        private WebDriver driver;


        //------------------------ VANSAH INSTANCE CREATION---------------------------------------------------------------------------------
        //Creates an Instance of vansahnode, to set all the required field
        public VansahNode(String tESTFOLDERS_ID, String jiraIssue, String sprintKey, String release, String environment)
        {
            TESTFOLDERS_ID = tESTFOLDERS_ID;
            RELEASE_KEY = release;
            ENVIRONMENT_KEY = environment;
            JIRA_ISSUE_KEY = jiraIssue;
            SPRINT_KEY = sprintKey;
        }

        //------------------------ VANSAH ADD TEST RUN(TEST RUN IDENTIFIER CREATION) -------------------------------------------
        //POST prod.vansahnode.app/api/v1/run --> https://apidoc.vansah.com/#0ebf5b8f-edc5-4adb-8333-aca93059f31c
        //creates a new test run Identifier which is then used with the other testing methods: 1) add_test_log 2) remove_test_run

        //For JIRA ISSUES
        public void AddtestRunFromJIRAIssue(String testcase)
        {
            String[] project = testcase.Split("-"); ;
            PROJECT_KEY = project[0];
            CASE_KEY = testcase;
            SEND_SCREENSHOT = false;

            ConnectToVansahRest("addtestRunFromJIRAIssue", driver);
        }
        //For TestFolders
        public void AddTestRunFromTestFolder(String testcase)
        {
            String[] project = testcase.Split("-"); ;
            PROJECT_KEY = project[0];
            CASE_KEY = testcase;
		    SEND_SCREENSHOT = false;
		    ConnectToVansahRest("addTestRunFromTestFolder", driver);
        }
    //------------------------------------------------------------------------------------------------------------------------



    //-------------------------- VANSAH ADD TEST LOG (LOG IDENTIFIER CREATION ------------------------------------------------
    //POST prod.vansahnode.app/api/v1/logs --> https://apidoc.vansah.com/#8cad9d9e-003c-43a2-b29e-26ec2acf67a7
    //adds a new test log for the test case_key. Requires "test_run_identifier" from add_test_run

    public void AddtestLog(int result, String comment, int testStepRow, bool sendScreenShot, WebDriver driver)
    {

		//0 = N/A, 1 = FAIL, 2 = PASS, 3 = Not tested
		RESULT_KEY = result;
		COMMENT = comment;
		STEP_ORDER = testStepRow;
		SEND_SCREENSHOT = sendScreenShot;
        ConnectToVansahRest("addTestLog", driver);
    }
    //-------------------------------------------------------------------------------------------------------------------------



    //------------------------- VANSAH ADD QUICK TEST --------------------------------------------------------------------------
    //POST prod.vansahnode.app/api/v1/run --> https://apidoc.vansah.com/#0ebf5b8f-edc5-4adb-8333-aca93059f31c
    //creates a new test run and a new test log for the test case_key. By calling this endpoint, 
    //you will create a new log entry in Vansah with the respective overal Result. 
    //(0 = N/A, 1= FAIL, 2= PASS, 3 = Not Tested). Add_Quick_Test is useful for test cases in which there are no steps in the test script, 
    //where only the overall result is important.

    //For JIRA ISSUES
    public void AddQuickTestFromJiraISSUE(String testcase, int result, String comment, bool sendScreenShot, WebDriver driver)
    {

		//0 = N/A, 1= FAIL, 2= PASS, 3 = Not tested
		CASE_KEY = testcase;
		RESULT_KEY = result;
		COMMENT = comment;
		SEND_SCREENSHOT = sendScreenShot;
        ConnectToVansahRest("addQuickTestFromJiraISSUE", driver);
    }
    //For TestFolders
    public void AddQuickTestFromTestFolders(String testcase, int result, String comment, bool sendScreenShot, WebDriver driver)
    {

		//0 = N/A, 1= FAIL, 2= PASS, 3 = Not tested
		CASE_KEY = testcase;
		RESULT_KEY = result;
		COMMENT = comment;
		SEND_SCREENSHOT = sendScreenShot;
        ConnectToVansahRest("addQuickTestFromTestFolders", driver);
    }

    //------------------------------------------------------------------------------------------------------------------------------


    //------------------------------------------ VANSAH REMOVE TEST RUN *********************************************
    //POST prod.vansahnode.app/api/v1/run/{{test_run_identifier}} --> https://apidoc.vansah.com/#2f004698-34e9-4097-89ab-759a8d86fca8
    //will delete the test log created from add_test_run or add_quick_test

    public void RemoveTestRun()
    {
        ConnectToVansahRest("removeTestRun", driver);
    }
    //------------------------------------------------------------------------------------------------------------------------------

    //------------------------------------------ VANSAH REMOVE TEST LOG *********************************************
    //POST remove_test_log https://apidoc.vansah.com/#789414f9-43e7-4744-b2ca-1aaf9ee878e5
    //will delete a test_log_identifier created from add_test_log or add_quick_test

    public void RemoveTestLog()
    {
        ConnectToVansahRest("removeTestLog", driver);
    }
    //------------------------------------------------------------------------------------------------------------------------------


    //------------------------------------------ VANSAH UPDATE TEST LOG ------------------------------------------------------------
    //POST update_test_log https://apidoc.vansah.com/#ae26f43a-b918-4ec9-8422-20553f880b48
    //will perform any updates required using the test log identifier which is returned from add_test_log or add_quick_test

    public void UpdateTestLog(int result, String comment, bool sendScreenShot, WebDriver driver)
    {

		//0 = N/A, 1= FAIL, 2= PASS, 3 = Not tested
		RESULT_KEY = result;
		COMMENT = comment;
		SEND_SCREENSHOT = sendScreenShot;
        ConnectToVansahRest("updateTestLog", driver);
    }
    public String Screenshot()
    {
            Screenshot ss = ((ITakesScreenshot)driver).GetScreenshot();
            byte[] buffer = new byte[ss.AsByteArray.Length];
            String base64 = Convert.ToBase64String(buffer);
            return base64;
    }

        private void ConnectToVansahRest(String type, WebDriver driver)
        {

            if (updateVansah == "1")
            {
                httpClient = new HttpClient();
                HttpResponseMessage response = null;
                String requestBody;
                HttpContent Content;

                //Adding headers
                httpClient.DefaultRequestHeaders.Accept.Clear();
                httpClient.DefaultRequestHeaders.Accept.Add(
                    new MediaTypeWithQualityHeaderValue("application/json"));
                httpClient.DefaultRequestHeaders.Add("Authorization", VANSAH_TOKEN);
                if (SEND_SCREENSHOT) {

                    Screenshot();

                }

                if (type == "addtestRunFromJIRAIssue")
                {

                    requestBody = "{\r\n"
                               + "    \"case\": {\r\n"
                               + "        \"key\": \"" + CASE_KEY + "\"\r\n"
                               + "    },\r\n"
                               + "    \"asset\": {\r\n"
                               + "        \"type\": \"issue\",\r\n"
                               + "        \"key\": \"" + JIRA_ISSUE_KEY + "\"\r\n"
                               + "    },\r\n"
                               + "    \"properties\": {\r\n"
                               + "        \"environment\": {\r\n"
                               + "            \"name\": \"" + ENVIRONMENT_KEY + "\"\r\n"
                               + "        },\r\n"
                               + "        \"release\": {\r\n"
                               + "            \"name\" : \"" + RELEASE_KEY + "\"\r\n"
                               + "        },\r\n"
                               + "        \"sprint\": {\r\n"
                               + "            \"name\" : \"" + SPRINT_KEY + "\"\r\n"
                               + "        }\r\n"
                               + "    },\r\n"
                               + "     \"project\" :{\r\n"
                               + "        \"key\":\"" + PROJECT_KEY + "\"\r\n"
                               + "    }"
                               + "}";

                    //Console.WriteLine(requestBody);
                    httpClient.BaseAddress = new Uri(ADD_TEST_RUN);
                    
                    Content = new StringContent(requestBody, Encoding.UTF8, "application/json" /* or "application/json" in older versions */);
                    response = httpClient.PostAsync("", Content).Result;

                }
                if (type == "addTestRunFromTestFolder")
                {
                    requestBody = "{\r\n"
                             + "    \"case\": {\r\n"
                             + "        \"key\": \"" + CASE_KEY + "\"\r\n"
                             + "    },\r\n"
                             + "    \"asset\": {\r\n"
                             + "        \"type\": \"folder\",\r\n"
                             + "        \"identifier\": \"" + TESTFOLDERS_ID + "\"\r\n"
                             + "    },\r\n"
                             + "    \"properties\": {\r\n"
                             + "        \"environment\": {\r\n"
                             + "            \"name\": \"" + ENVIRONMENT_KEY + "\"\r\n"
                             + "        },\r\n"
                             + "        \"release\": {\r\n"
                             + "            \"name\" : \"" + RELEASE_KEY + "\"\r\n"
                             + "        },\r\n"
                             + "        \"sprint\": {\r\n"
                             + "            \"name\" : \"" + SPRINT_KEY + "\"\r\n"
                             + "        }\r\n"
                             + "    },\r\n"
                             + "     \"project\" :{\r\n"
                             + "        \"key\":\"" + PROJECT_KEY + "\"\r\n"
                             + "    }"
                             + "}";

                    //Console.WriteLine(requestBody);
                    httpClient.BaseAddress = new Uri(ADD_TEST_RUN);



                    Content = new StringContent(requestBody, Encoding.UTF8, "application/json" /* or "application/json" in older versions */);
                    response = httpClient.PostAsync("", Content).Result;


                }
                if (type == "addTestLog")
                {
                    // String filename = "";
                    // long millis = System.currentTimeMillis();
                    // String datetime = new Date().toGMTString();
                    //datetime = datetime.replace(" ", "");
                    //datetime = datetime.replace(":", "");
                    // String rndchars = RandomStringUtils.randomAlphanumeric(16);
                    //filename = rndchars + "_" + datetime + "_" + millis;
                    requestBody = "{\r\n"
                            + "	\"run\": {\r\n"
                            + "		\"identifier\": \"" + TEST_RUN_IDENTIFIER + "\"\r\n"
                            + "	},\r\n"
                            + "	\"step\": {\r\n"
                            + "		\"number\": \"" + STEP_ORDER + "\"\r\n"
                            + "	},\r\n"
                            + "	\"result\": {\r\n"
                            + "		\"id\": " + RESULT_KEY + "\r\n"
                            + "	},\r\n"
                            + "	\"actualResult\": \"" + COMMENT + "\",\r\n"
                            + "     \"project\" :{\r\n"
                            + "        \"key\":\"" + PROJECT_KEY + "\"\r\n"
                            + "    }\r\n"
                            + "     \"attachments\" : [\r\n"
                            + "		{ "
                            + "		\"name\" : " + Screenshot() + ","
                            + "     \"extension\":\"png\",\r\n"
                            + "		\"file\":\"" + FILE + "\"\r\n"
                            + "}]"
                            + "}";

                    //   Console.WriteLine(requestBody);
                    httpClient.BaseAddress = new Uri(ADD_TEST_LOG);



                    Content = new StringContent(requestBody, Encoding.UTF8, "application/json" /* or "application/json" in older versions */);
                    response = httpClient.PostAsync("", Content).Result;

                }
                if (type == "addQuickTestFromJiraISSUE")
                {

                    requestBody = "{\r\n"
                            + "    \"case\": {\r\n"
                            + "        \"key\": \"" + CASE_KEY + "\"\r\n"
                            + "    },\r\n"
                            + "    \"asset\": {\r\n"
                            + "        \"type\": \"issue\",\r\n"
                            + "        \"key\": \"" + JIRA_ISSUE_KEY + "\"\r\n"
                            + "    },\r\n"
                            + "    \"properties\": {\r\n"
                            + "        \"environment\": {\r\n"
                            + "            \"name\": \"" + ENVIRONMENT_KEY + "\"\r\n"
                            + "        },\r\n"
                            + "        \"release\": {\r\n"
                            + "            \"name\" : \"" + RELEASE_KEY + "\"\r\n"
                            + "        },\r\n"
                            + "        \"sprint\": {\r\n"
                            + "            \"name\" : \"" + SPRINT_KEY + "\"\r\n"
                            + "        }\r\n"
                            + "    },\r\n"
                            + "     \"project\" :{\r\n"
                            + "        \"key\":\"" + PROJECT_KEY + "\"\r\n"
                            + "    },\r\n"
                            + "      \"result\": {\r\n"
                            + "        \"id\": \"" + RESULT_KEY + "\"\r\n"
                            + "    }"
                            + "}";
                    //   Console.WriteLine(requestBody);
                    httpClient.BaseAddress = new Uri(ADD_TEST_RUN);



                    Content = new StringContent(requestBody, Encoding.UTF8, "application/json" /* or "application/json" in older versions */);
                    response = httpClient.PostAsync("", Content).Result;

                }
                if (type == "addQuickTestFromTestFolders")
                {
                    requestBody = "{\r\n"
                            + "    \"case\": {\r\n"
                            + "        \"key\": \"" + CASE_KEY + "\"\r\n"
                            + "    },\r\n"
                            + "    \"asset\": {\r\n"
                            + "        \"type\": \"folder\",\r\n"
                            + "        \"identifier\": \"" + TESTFOLDERS_ID + "\"\r\n"
                            + "    },\r\n"
                            + "    \"properties\": {\r\n"
                            + "        \"environment\": {\r\n"
                            + "            \"name\": \"" + ENVIRONMENT_KEY + "\"\r\n"
                            + "        },\r\n"
                            + "        \"release\": {\r\n"
                            + "            \"name\" : \"" + RELEASE_KEY + "\"\r\n"
                            + "        },\r\n"
                            + "        \"sprint\": {\r\n"
                            + "            \"name\" : \"" + SPRINT_KEY + "\"\r\n"
                            + "        }\r\n"
                            + "    },\r\n"
                            + "     \"project\" :{\r\n"
                            + "        \"key\":\"" + PROJECT_KEY + "\"\r\n"
                            + "    },\r\n"
                            + "      \"result\": {\r\n"
                            + "        \"id\": \"" + RESULT_KEY + "\"\r\n"
                            + "    }"
                            + "}";


                    //   Console.WriteLine(requestBody);
                    httpClient.BaseAddress = new Uri(ADD_TEST_RUN);



                    Content = new StringContent(requestBody, Encoding.UTF8, "application/json" /* or "application/json" in older versions */);
                    response = httpClient.PostAsync("", Content).Result;

                }
                if (type == "removeTestRun")
                {
                    //Console.WriteLine(requestBody);
                    httpClient.BaseAddress = new Uri(REMOVE_TEST_RUN + TEST_RUN_IDENTIFIER);                
                    response = httpClient.DeleteAsync("").Result;
                }


                if (type == "removeTestLog")
                {
                    //Console.WriteLine(requestBody);
                    httpClient.BaseAddress = new Uri(REMOVE_TEST_LOG + TEST_LOG_IDENTIFIER);
                    response = httpClient.DeleteAsync("").Result;
                }


                if (type == "updateTestLog")
                {
                    requestBody = "{\r\n"
                            + "    \"result\": {\r\n"
                            + "        \"id\": \"" + RESULT_KEY + "\"\r\n"
                            + "    },\r\n"
                            + "    \"actualResult\": \"" + COMMENT + "\"\r\n"
                            + "}";
                    //Console.WriteLine(requestBody);
                    httpClient.BaseAddress = new Uri(UPDATE_TEST_LOG + TEST_LOG_IDENTIFIER);
                     Content = new StringContent(requestBody, Encoding.UTF8, "application/json" /* or "application/json" in older versions */);
                    response = httpClient.PutAsync("", Content).Result;
                }

                if (response.IsSuccessStatusCode)
                {
                    //Console.WriteLine(response.RequestMessage);

                    var responseMessage = response.Content.ReadAsStringAsync().Result;
                    var obj = JObject.Parse(responseMessage);
                    if (type == "addtestRunFromJIRAIssue")
                    {

                        TEST_RUN_IDENTIFIER = obj.SelectToken("data.run.identifier").ToString();
                        Console.WriteLine($"Test Run has been created Successfully RUN ID : {TEST_RUN_IDENTIFIER}");

                    }
                    if (type == "addTestRunFromTestFolder") 
                    {
                        TEST_RUN_IDENTIFIER = obj.SelectToken("data.run.identifier").ToString();
                        Console.WriteLine($"Test Run has been created Successfully RUN ID : {TEST_RUN_IDENTIFIER}");
                    }
                    if (type == "addTestLog")
                    {
                        TEST_LOG_IDENTIFIER = obj.SelectToken("data.log.identifier").ToString();
                        Console.WriteLine($"Test Log has been added to a test Step Successfully LOG ID : {TEST_LOG_IDENTIFIER}");

                    }
                    if (type == "removeTestLog")
                    {
                        Console.WriteLine($"Test Log has been removed from a test Step Successfully LOG ID : {TEST_LOG_IDENTIFIER}");
                    }
                    if (type == "removeTestRun") {
                        Console.WriteLine($"Test Run has been removed Successfully for the testCase : {CASE_KEY} RUN ID : {TEST_RUN_IDENTIFIER}");
                    
                    }
                    response.Dispose();

                }
                else
                {
                    var responseMessage = response.Content.ReadAsStringAsync().Result;
                    var obj = JObject.Parse(responseMessage);
                    Console.WriteLine(obj.SelectToken("message").ToString());
                    response.Dispose();
                }

            }
            else {
                Console.WriteLine("Sending Test Results to Vansah TM for JIRA is Disabled");
            }
        }
        

    }
}



